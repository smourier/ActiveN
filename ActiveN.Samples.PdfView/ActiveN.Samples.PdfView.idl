#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

// TODO: generate other uuids
[
	uuid(99b893cf-4784-4dc0-82da-adff802b87dd),
	version(1.0),
	helpstring("ActiveN.Samples.PdfView 1.0 Type Library")
]
library ActiveNSamplesPdfViewLib
{
	importlib("stdole2.tlb");

	typedef [public] PdfPageRotationEnum PdfPageRotation;
	typedef enum { Normal = 0, Rotate90 = 1, Rotate180 = 2, Rotate270 = 3 } PdfPageRotationEnum;

	[
		object,
		uuid(22be6c86-8234-4fee-9a4f-e4d251ff9358),
		dual,
		nonextensible,
		pointer_default(unique),
		helpstring("IPdfViewPage Interface"),
	]
	interface IPdfViewPage : IDispatch
	{
		[propget]
		HRESULT Index([out, retval] int* value);

		[propget]
			HRESULT Width([out, retval] double* value);

		[propget]
			HRESULT Height([out, retval] double* value);

		[propget]
			HRESULT PreferredZoom([out, retval] float* value);

		[propget]
			HRESULT Rotation([out, retval] PdfPageRotation* value);

		HRESULT ExtractTo(VARIANT output);
	}

	[
		object,
		uuid(63b16fe2-2faa-4498-9c3e-023e720f8cae),
		dual,
		nonextensible,
		pointer_default(unique),
		helpstring("IPdfViewControl Interface"),
	]
	interface IPdfViewControl : IDispatch
	{
		// these are standard properties for ActiveX controls (declared in olectl.h)
		[propput, bindable, requestedit, id(DISPID_ENABLED)]
		HRESULT Enabled([in]VARIANT_BOOL value);
		[propget, bindable, requestedit, id(DISPID_ENABLED)]
			HRESULT Enabled([out, retval] VARIANT_BOOL* value);

		[propput, bindable, requestedit, id(DISPID_BACKCOLOR)]
			HRESULT BackColor([in]OLE_COLOR clr);
		[propget, bindable, requestedit, id(DISPID_BACKCOLOR)]
			HRESULT BackColor([out, retval] OLE_COLOR* pclr);

		// these are custom properties for our PdfViewControl
		[propput, bindable, requestedit]
			HRESULT ShowControls([in]VARIANT_BOOL value);
		[propget, bindable, requestedit]
			HRESULT ShowControls([out, retval] VARIANT_BOOL* value);

		[propget, bindable, requestedit]
			HRESULT PageCount([out, retval] long* value);

		[propget, bindable, requestedit]
			HRESULT IsPasswordProtected([out, retval] VARIANT_BOOL* value);

		[propget, bindable, requestedit]
			HRESULT FilePath([out, retval] BSTR* value);

		[propget, bindable, requestedit, id(DISPID_HWND)]
			HRESULT HWND([out, retval] LONG_PTR* value);

		HRESULT OpenStream(IStream* stream);
		HRESULT OpenFile(BSTR filePath);
		HRESULT GetPage(long pageNumber, [out, retval] IPdfViewPage** value);
		HRESULT CloseFile();
		HRESULT MovePage(long delta);
	};

	[
		uuid(48c606f1-d597-467d-8a38-1c02fd7e019d),
		helpstring("Event interface for IPdfViewControl")
	]
		dispinterface IPdfViewControlEvents
	{
		properties:
		methods:
			// ids here *must* match those in PdfViewControlEventsDispIds.cs
			[id(100), helpstring("A new file was opened.")]
			void FileOpened();

			[id(101), helpstring("A file was closed.")]
			void FileClosed();

			[id(102), helpstring("Current page has changed.")]
			void PageChanged();
	};

	[
		uuid(d1803953-c348-426e-bd42-5c47f26d9caa),
		helpstring("PdfViewControl Class")
	]
		coclass PdfViewControl
	{
		[default] interface IPdfViewControl;
		[default, source] dispinterface IPdfViewControlEvents;
	}
}